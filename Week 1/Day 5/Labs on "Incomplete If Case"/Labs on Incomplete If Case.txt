Transcription
Hello everyone, welcome to this session on Synthesis and Verilog coding. So here in this session we are going to discuss about the labs on partial if condition, what are the inferred latches, what are the dangers of using incomplete if, incomplete cases and partial assignment in cases, all those things, all these concepts we discussed as a theoretical concepts in the previous session. We are going to see that practically in action now, how the simulator and the synthesis tool behaves when we have all these incomplete if or incomplete case constructs. Okay. So let's get started. So all the files we are going to use are in this folder, Verilog files. So first we will look at all that incomp files. I'm going to list them. So we'll start with incomplete if. Okay. So first let me open all the files so all the files are going to open so we will quickly see what are the first we will start with incomplete if yes it's here incomplete if let's look at this code For every code we are picking we will look at the RTL as well as what happens when we what we will have what will happen when we simulate the RTL what will happen when we synthesize the RTL. OK. So this is the RTL. We have an incomplete if. So what's happening. Input we have I0 I1 and I2 output is a register output is a reg variable called Y always at star if I0 Y gets I1. So let's look at how the look so I have if always translates into a mux so if always translates into a mux I have a mux whose select line is I0 if I0 is high then I'm going to connect the output to I1 else now the question is for the else else what is going to happen nothing is mentioned so why will latch on so this is nothing but if you see the behavior here this is nothing but a D latch correct there is a D latch which latch enable as I0. It's a pause latch. Correct? Whenever I0 is present I1 is seen on Y. Whenever I0 is absent it latches on to its value. If I0 goes low Y simply latches on. This is what is the behavior we are expecting. Correct? There is nothing but this. Correct? So let's see what we are getting. this is what is our analysis let's see what happens when we simulate it and what we have what happens when we synthesize it so as usual we will use I wear lock for simulation and uses for synthesis so I very log we saw incomplete underscore if TB underscore incomplete underscore if dot V dot slash a dot out this generates the income if dot vcd let me open this so we have i0 i1 i2 is not used at all in the code so we will not be bothered about it so let's see here what happens bingo see clearly we are seeing this correct whenever i0 is going low i0 is going low the output Y is latching on to something. It's either 1 or 0 permanently. Correct? There is no change, there is no change in Y whenever I0 is low. If you see here, I0 is low here. There is no change, absolutely no change in. So this is clearly the latching action. Correct? It's exactly like a latch. Whenever this signal is high, I am getting the I am seeing that Y is following I1 whenever this is high Y is following I1 whenever this is high this is my I1 correct so let me put it in different color if you want so see this whenever select is high whenever my I0 I0 is my select line correct whenever i0 is high at that time my y is exactly following i1 whenever i0 is going low at that time there is no activity on y it's constant either at 1 or 0 i don't know whether it's 1 or 0 but whatever value it takes it's constant now what value it is taking let us see now this is the instant at which i0 is going low here now if you see just before i0 went low i1 was 1 so the moment i0 goes low it is latching on to that value. Here similarly when i0 is going low, the value on i1 is 0 so y is latching on to that value. This is what is happening with the incomplete if because it's an incomplete if. Correct? This is exactly following the behavior as what we expected here. Correct? So now let us go back to our synthesis and see what happens in case of synthesis. So uses is our tool. I have kept the uses ready here. So we do read very long incomplete if got me and we are going to set this as the same tops and type on top. I'm not going to read the Liberty files because I have already read and kept so since I found top incomplete if. See clearly there's a D latch inferred. We coded MUX, correct? Our interest, our aim was to code a MUX. Correct? Our aim was to code the MUX but you see here our aim was to code the MUX but what we got is a latch. Clearly the tool is inferring a latch. Let's do our ABC and complete the synthesis. and see what happens. exactly inferring the latch this is what we expected correct i2 is not used at all i0 is the enable pin d is connected to i1 q is connected to y this is exactly what we expected and this is exactly what we are seeing here it's a d latch with i0 as enabled this is exactly Synthesis is referring a latch and simulation is also inferring a latch. This is the danger of incomplete if. We don't want a latch but we will get a latch this is what is called as a inferred latch coming out of incomplete if clear now let's go to the next code and see what is present there so we finished incomplete if so let me close this we don't need the VCD file so let me close all the VCD files accidentally they also got open We don't need the TB files also. So let's look at incomplete if to. In case of incomplete IF2, what is happening? Let's try to draw. So, I have again a MUX. The select line is I0. The output is Y1 here. Y is I1. else else goes to another mux this select line is I1 sorry I2 and this gets I3 now else is missing if let's say I0 is also false I2 is also false both are false what has to happen nothing is told so it will latch so Effectively, if you look, you are going to get a latch. You are going to get only one latch. And what will be the enable condition? When both are true, I0 is true, I1 is true. When I0, I1 both are true, so it will be I0 ORed with I1. Both of them are I2, sorry. When both of them are true, any one of them are true, I0 is true or I1 is true. If any one of them is true, this logic, whatever is this, whatever is the Boolean expression of this portion of the logic. Boolean expression for this portion of the logic where i3 and i1 are assigned that code will be present here. So you will have a combo logic which will be a function of i0, i2, i1, i3 and that will be the Q. So this is a combo logic. This is what we are expecting. Correct. Now let us simulate as well as synthesize and see whether this is our behavior. OK. This is what we are expecting. Let's see. So let's do the simulation first. So. I really log. incomplete underscore if two tb incomplete if two dot v a dot out and we launch the gtk wave with this vcd 0 I 1 I 2 I 3 and Y let's see here let's see here whenever I 0 is high see look at what we got Whenever I0 is high, whenever I0 is high, output is following I1. Correct. I1. Let me put it in different color. Same. I'll put it in blue. I3. I'll put it in. Okay. I2. I'll put it in the color. Say red. See now here in this window when I0 is high my output is exactly following I1. Correct. That's what we are expecting. Correct. When I0 is high Y follows I1. When I0 is low it looks towards I2. Correct. Now in this window you see I0 goes low I2 is also low. When I0, I2 both are low, output is constant if you see. I0 is low, I2 is low, output is constant. I0 is low, output is low, sorry, I2 is low, output is constant. Whether it may be 0 or 1, but output is constant. When I2 goes high, it starts following I3. See, it's just following I3. Whenever I0 is low and I2 is high. It follows I3 exactly. It follows I3. Correct? So this is the behavior. This is exactly what we expected. So there is also a latching action because of this here. Clear? So let's see what happens in our synthesis. so read very log incomplete if two dot v sorry incomplete right incomplete if two dot v synth hyphen top i am not reading the liberty because i have already read it in comp underscore if two is very important whenever you do synth underscore top you need to look at what all the logic that is getting inferred so here also we are expecting a latch to be inferred clearly it is inferring a latch so we will do a b c i fun liberty dot dot slash my lib See, this is our expectation. This is our expectation. Correct. Let's see what has come here. What is our expectation? So, OK, this is what is our expectation. Let's see what comes here. See this. So there is a combo logic here. There is a combo logic here. which is a function of look at the inputs to this combo logic it's a function of i1 i3 i0 as well as correct it's a function of i0 i1 i3 also i2 correct so that Now look at this. This is clearly what we expected. I0 ORD with I2 is what is going as the enable for the latch. We expected I0 ORD with I2 as the enable of the latch. This is exactly happening here. I0 ORD with I2 is there, then there is no problem. If both I0 and I2 are not there, then the latching action happens. correct here also this what it is right if both I 0 and I 2 are false then it latches so that's what it is I 0 and I 2 are both low it latches otherwise it's a function of I 1 I 0 and I 3 otherwise it's a function of I 0 I 1 I 3 so I 0 I 1 I 3 this is that whole muxing logic is represented by this Boolean logic here clear this exactly aligns with our understanding. Clear? Okay. So, this is about the incomplete if. Correct? Now, let us go ahead with incomplete cases. What happens in case of incomplete cases? This we will see in the next session. Okay? Thank you.