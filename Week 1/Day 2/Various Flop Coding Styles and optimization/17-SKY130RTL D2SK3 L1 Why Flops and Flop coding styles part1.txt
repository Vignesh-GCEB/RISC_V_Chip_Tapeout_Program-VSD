Transcription
hello everyone welcome to this session so in this session we will be discussing about how to code a flop and what are the different types of flops available for us and how to use them and Like what are the different coding styles possible? OK, so let's get started. So all the files needed for this exercise are present in the same location in the Verilog files. I have opened and kept them already here. So these are the files we are going to use for today's discussion. So. When we say a flop, first let us understand exactly what we are trying to do. And let us look at some basics, interesting basics of digital design. Okay. So if I take a digital design for any digital design, for example, let me take, for example, for example, an iron gate. This is a combinational circuit. Correct. Some combinational circuit. Correct. So we will look at y-flops. So these combinational circuits, when I give them an input here, some input, the output is going to change after the propagation delay. Correct? There's going to be a propagation delay here. And because I have a propagation delay, the output is going to glitch. like why let us understand say if example an iron gate this is a combinational circuit correct some combinational circuit correct so we will look at y flops so these combinational circuits when i give them an input here some input the output is going to change after the propagation delay correct there is going to be a propagation delay here and because I have a propagation delay the output is going to glitch like why let us understand say for example let us take the circuit itself let us say make my this output go from 1 to this input let me call this ABC my a is going from 0 to 1 B is going from 0 to 1 and C is going from 1 to 0 okay all these things happen simultaneously these are my ABC okay now when C goes low Immediately it is seen by this R gate. This R gate sees this immediately. So what will happen? At the output Y, now initially A is also 0, B is also 0. So this node I will call this as I, internal node I. I is 0 now. Okay, I is 0 C is going from 1 to 0 so 0 odd with 0 will make Y as 0 Correct. So Y was initially 1 because C was 1 but let's say the propagation delay of this or gate Is let's say 1 nanosecond. So after 1 nanosecond of C going low Y will go low This is 1 nanosecond, correct Now let us say this the delay of this AND gate is 2 nanosecond Now A and B went high for the node I to go high it will take 2 nanosecond correct from here to here 2 nanosecond it takes 2 nanoseconds after I will go high and after I goes high it will take the propagation delay of the OR gate which is one nanosecond correct for output Y to go high again so from here again one nanosecond it takes so Y goes low and comes up back this is what we call as a glitch because If I evaluate the Boolean expression A and B or C for the Boolean values 1 1 0 and previous value was what 001 correct previous value was 001 for 001 also the output is 1 for 110 also the output is 1 for this Boolean expression correct correct. But momentarily, I see a zero here. This zero is a glitch. So I'm expecting the output to be one, but momentarily the output goes to zero and comes back. This is what I call as a glitch. Okay, glitch happens. So what? So what? Let's see. Now, in my design, In my design, I'm going to have combinational circuits. These are combinational circuits. Now these combinational circuits are going to be present everywhere. Now clearly, more the amount of combinational circuits, more are going to be the glitches. The outputs will become more and more glitchy. If I add two more stages of combinational circuits, clearly the output will become more glitchy. This is clearly evident from here. Now let's say I have a combinational circuit. Again I have a combinational circuit. Again I have a combinational circuit. This is also a combinational circuit. This is also a combinational circuit. Now because I have a continuously combinational circuits. Now what will happen? The outputs will never settle down. The output will continuously be glitchy. This is what we want to avoid. So what we do? We want an element to store that value. And that element is what we call as a flop. So a D flip flop These flops are like storage elements. Now, if you see, if I put the flops here, if I say, for example, if I put flops here, in between the combinational circuits. What will happen? I am using the flops to sort of restrict the glitches because the way a flop works is the flop output will change only on the edge of the clock. So I am giving a clock to this flop. The output of a flop will change only on the edge of the clock. That means even though the input of the flop is glitching, the output will be stable. So if the outputs of the flop are stable, the flop is feeding, this flop is what is feeding this combinational circuit. so this combinational circuit sees stable input so eventually this combinational circuits output will also settle down otherwise what will happen this glitches propagates to this combinational circuit this will also be glitching this propagates to here this will also be getting everything will be glitching whereas here because i am putting flops these flops are short of shielding let's say for example this is your d this is q the Q node is sort of shielded from the D node because of through the clock. There is no connection between D and clue when there is no clock. Correct. If the clock edge doesn't occur the Q does not change. That means Q is shielded from changes in D. Thereby Q is always giving out a stable value here. That means the output of this combination circuit will settle down. So that is the main purpose of using a flop in a digital circuit. I hope this discussion is very clear. So now we will see how to code the flop. Now when you are putting flop it's very important because the flop is always going to see what is the now there should be an initial state of the flop. If the initial state of the flop is unknown this combination circuit is looking to the flop to evaluate the output. If I don't initialize the flop the combination circuit will evaluate into garbage value. So I need to initialize the flop. So to initialize the flop is what we have the control pins on the flop like reset or set. And these two reset and set can be either synchronous or asynchronous. So let us look at all these in the code. How to create an asynchronous flop? Reset. How to create a synchronous reset? How to create an asynchronous set? How to create a synchronous set? All these things we will look into the code. Let's go into the code.