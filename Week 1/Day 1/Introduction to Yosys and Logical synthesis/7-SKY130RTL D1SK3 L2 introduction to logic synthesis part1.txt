Transcription
discussion on logic synthesis. So let's understand what is logic synthesis and how to go about it. So first we'll begin with RTL design. What is RTL design? RTL design is the behavioral representation of the required specification. It looks like this. I have the specification which is written in the behavioral form in a HDL language. This is written in a Verilog HDL. Okay. Now, this is how my RTL code looks like. And I want a digital logic circuit looking like this. I don't want a code. I want a hardware circuit. Now, how do I map these two? Is the question. The answer comes in the form of synthesis. What happens in the synthesis? RTL to gate level translation is what we call as synthesis. The design is converted into gates and the connection are made between the gates. And the file that is written out is what we call as netlist. So we have the RTL. We will have something called as the Trenton libraries. and we are going to take it through synthesis. And what we are going to get is called the netlist. So what is .lib? .lib is the collection of logical modules. It includes all the basic gates, like AND, OR, NOT, et cetera. It's just a bucket of all the standard cells that's available to you. It may contain different flavors of the same gate. Like it may have a two input AND gate, three input AND gate, four input AND gate, a slow version of it, a medium version of it, and a fast version of it. We will see why we need them. So a dot lab is just a collection of all these standard cells, different flavors of same standard cells, different flavors of functionalities of standard cells like AND gate, OR gate, XOR gate, inverters, or whatever it may be. It may not be exhaustive of all the gates you want, but it will be rich enough to implement any logic functionality. Say, for example, we know that a NAND or a NOR can implement any logic function. So if I just have a NAND gate and NOR gate itself, that's more than sufficient for me to implement any Boolean logic function because NAND and NOR are universal functionalities. Correct? So, dotlib contains standard cells to implement any Boolean logic functionalities. Now the question comes is why do we need different flavors of gate? Okay. The answer is this. Combinational delay in the logic part determines the maximum speed of operation of the digital logic circuit. Let's think about a simple circuit like this. I have a flip-flop A and I have a flip-flop B connected through a combinational circuit. Now the question is what is the maximum speed it can work at? Can it work at 1 gigahertz? Can it work at 2 gigahertz? What is the maximum clock rate I can apply here? The answer to that is t clock, where t clock is the period of the clock. Let me draw the waveform here. So the clock looks something like this. So the period of the clock, t clock, this is my t clock. Now how big this t clock should be? This t clock should be that much big such that the time for, The data to travel from this flop all the way till this flop is achieved in one clock cycle. The time duration for this is one clock cycle. So the propagation delay of flop A, that's what I call a CQA. This is the propagation delay of flop A. T combi is the propagation delay of the combinational circuit. This is the T combi, the propagation delay of the combinational circuit. And there's something called a setup time. The setup time is the time before the clock edge, I need to supply the data here. I cannot exactly supply on the nick of the moment. It's something like, think about it. Let's say, for example, you have to catch a train at 5 p.m. You cannot be in the station at 5 p.m. You need to be a couple of minutes before 5 p.m. so that you will be able to board the train before 5 p.m. correct so you need a small time duration before the train leaves for you to board the train correct the same way before the clock arrives the data needs to be stable here a small duration before that that small time is what we call as the setup time so The clock cycle needs to accommodate the propagation delay of the flop A, the combinational delay and the setup time of flop B. That should be the minimum requirement of the clock period and that will decide the maximum frequency. So F clock will be 1 by T clock and since These are reciprocal relationship. This is the minimum clock period needed. This will be the maximum clock frequency. Clear? So, now naturally the question arises is to achieve maximum clock speed because more the clock speed, minimum the clock period, maximum will be the clock speed. Maximum is the clock speed. Better is my performance. So we are always looking for maximum performance. That means these delays should be as less as possible. Correct. So the natural question that comes to our mind is we need the cells to work very fast to make the T combinational small. So are faster cells sufficient? That means I should have only faster cells in my dot lib. Why do I have slow and medium cells in my dot lib? That is the natural question. Correct. Let's look at that.